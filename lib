#!/bin/bash

function abspath() {
	if [[ -d "$1" ]]; then
		pushd "$1" >/dev/null
		pwd
		popd >/dev/null
	elif [[ -e $1 ]]; then
		pushd "$(dirname "$1")" >/dev/null
		echo "$(pwd)/$(basename "$1")"
		popd >/dev/null
	else
		echo "$1" does not exist! >&2
		return 127
	fi
}

if [ $# -ne 1 ]; then
	echo "Usage: $0 all-request-curl-file"
	exit
fi

#if [ -d "$outFileDir" ]; then
#	echo "output directory $outFileDir alread exists, check it, exit now"
#	exit
#fi

allCurlReq="$1"
acrPath=$(abspath "$allCurlReq")

mkdir "$outFileDir"
cd "$outFileDir"

cat "$acrPath" | grep -v "curl 'data:image/" | grep -v "curl '[^ ]\+google-analytics.com.*" | grep -v "curl '[^ ]\+doubleclick.net.*" |
	while read line; do
		cmdLine=$(echo "$line" | sed -E 's@;$@@g;s@(.*)($)@\1 -o @g')
		link=$(echo "$line" | awk -F"'" '{print $2}')
		if [ "$junk" != "" ]; then
			if [[ "$link" =~ .*"$junk".* ]]; then
				echo "junk link $link"
				continue
			fi
		fi

		if [ "$index" = "$link" ]; then
			echo "retrive index.html ... $cmdLine index.html"
			eval "$cmdLine index.html"
		fi

		truncLine=$(echo "$link" | sed "s@$prefix@@g")
		if [ ${#truncLine} -eq 0 ]; then
			if [ "$index" = "" ]; then
				eval "$cmdLine index.html"
			fi
			continue
		fi

		if [[ $truncLine =~ ^http[s]?://.* ]]; then
			truncLine=$(echo "$truncLine" | sed -E 's@(http[s]?://)(.*)@\2@g')
		fi

		dirName=$(dirname $truncLine)
		fileName=$(basename $truncLine)
		if [ "$dirName" = "$fileName" ]; then # https://demo.com/some.txt
			dirName="."
		fi

		if [ ! -d "$dirName" ]; then
			mkdir -p "$dirName"
		fi

		# polyfill.min.js\?features\=default\&flags\=gated polyfill.min.js
		fileName=$(echo "$fileName" | sed -E 's@([^?]+)(\?.+)@\1@g')

		if [ ! -f "${dirName}/${fileName}" ]; then
			echo "Getting ${dirName}/${fileName} : $cmdLine ${dirName}/${fileName}..."
			eval "$cmdLine ${dirName}/${fileName}"
		else
			echo "file $truncLine alread exists, jump over"
		fi
	done

if [ "$junk" != "" ]; then
	sed -E -i "s@$junk@@g" index.html
fi
sed -E -i 's@$prefix@@g;s@(.+)(apis.google.com)(.*)@@g' index.html

while true; do
	grep -E ".*[\"']http[s]?:\/\/.*" index.html >/dev/null 2>&1
	if [ $? -ne 1 ]; then
		sed -E -i "s@(.*)(\"|')(http[s]?\:\/\/)(.*)@\1\2./\4@g" index.html
	else
		break
	fi
done

while true; do
	grep -E ".*[\"'][/]+.*" index.html >/dev/null 2>&1
	if [ $? -ne 1 ]; then
		echo "1112"
		sed -E -i "s@(.*)(\"|')([/]+)(.*)@\1\2./\4@g" index.html
	else
		break
	fi
done

cd ..
cat >"$servFileName" <<EOF
package main

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	"github.com/gobuffalo/packr"
)

var (
	dir  = flag.String("dir", "./$outFileDir", "static files directory")
	help = flag.Bool("help", false, "show help info")
	port = flag.Int("port", 3000, "serve port")
)

func init() {
	flag.Parse()
	if *help {
		flag.PrintDefaults()
		os.Exit(0)
	}
}

func main() {
	box := packr.NewBox(*dir)

	http.Handle("/", http.FileServer(box))
	host := fmt.Sprintf(":%d", *port)
	fmt.Printf("listen on %s\n", host)
	http.ListenAndServe(host, nil)
}
EOF

cat >"${servFileName%go}c" <<EOF
#include "httpd.h"
#include <getopt.h>

#define BUFFERSIZE 256
char dir_path[BUFFERSIZE] = "$outFileDir";

void help(char *prog)
{
	printf("Usage: %s [-d dir] [-p port]\n", prog);
	printf("\n");
	printf("  -h, --help      display this help\n");
	printf("  -d, --debug     show debug info\n");
	printf("  -t, --target    target static files directory\n");
	printf("  -p, --port      serve port\n");
}

int main(int argc, char **argv)
{
	char serve_port[BUFFERSIZE] = "3000";

	int ret = 0;
	int option_index = 0;
	static int flag = 0;

	static struct option arg_options[] = {
		{"help", no_argument, 0, 'h'},
		{"debug", no_argument, 0, 'd'},
		{"target", required_argument, 0, 't'},
		{"port", required_argument, 0, 'p'},
		{0, 0, 0, 0}
	};

	while ((ret =
		getopt_long(argc, argv, ":hdt:p:", arg_options,
			    &option_index)) != -1) {
		switch (ret) {
		case 'h':
			help(argv[0]);
			return 0;
		case 'd':
			debug_mode = 1;
			break;
		case 't':
			snprintf(dir_path, BUFFERSIZE, "%s", optarg);
			break;
		case 'p':
			snprintf(serve_port, BUFFERSIZE, "%s", optarg);
			break;
		case ':':
			printf("miss argument\n");
			return -1;
		case '?':
			printf("unrecognizable argument\n");
			return -1;
		default:
			return -1;
		}
	}

	serve_forever(serve_port);
	return 0;
}

void route(int sock_fd)
{
	serve_dir(sock_fd, dir_path);
}
EOF

cat >Makefile <<EOF
.PHONY:all

all: ${servFileName%.go}

${servFileName%.go}: ${servFileName%go}c
	gcc -o \$@ \$^ ../httpd.c -I ../

clean:
	@rm -rf ${servFileName%.go}
EOF

cat >loader.sh <<EOF
#!/bin/bash

cd ${acrPath%/*}
./${servFileName%.go} \$@
if [ \$? -eq 0 ]; then
	exit
fi

count=0
while true; do
	let count+=1
	if [ \$count -gt 3 ]; then
		echo "already tried 3 times, exit"
		break
	fi

    ./${servFileName%.go} \$@ -p ${RANDOM}
	if [ \$? -eq 0 ]; then
		exit
	fi
done
EOF
chmod +x loader.sh
echo "loader generated: ${acrPath%/*}/loader.sh"
