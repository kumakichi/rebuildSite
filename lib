#!/bin/bash

function abspath() {
	if [[ -d "$1" ]]; then
		pushd "$1" >/dev/null
		pwd
		popd >/dev/null
	elif [[ -e $1 ]]; then
		pushd "$(dirname "$1")" >/dev/null
		echo "$(pwd)/$(basename "$1")"
		popd >/dev/null
	else
		echo "$1" does not exist! >&2
		return 127
	fi
}

if [ $# -ne 1 ]; then
	echo "Usage: $0 all-request-curl-file"
	exit
fi

#if [ -d "$outFileDir" ]; then
#	echo "output directory $outFileDir alread exists, check it, exit now"
#	exit
#fi

allCurlReq="$1"
acrPath=$(abspath "$allCurlReq")

mkdir "$outFileDir"
cd "$outFileDir"

cat "$acrPath" | grep -v "curl 'data:image/" | grep -v "curl '[^ ]\+google-analytics.com.*" | grep -v "curl '[^ ]\+doubleclick.net.*" |
	while read line; do
		cmdLine=$(echo "$line" | sed -E 's@(.*)(;$)@\1 -o @g')
		link=$(echo "$line" | awk -F"'" '{print $2}')
		if [ "$junk" != "" ]; then
			if [[ "$link" =~ .*"$junk".* ]]; then
				echo "junk link $link"
				continue
			fi
		fi

        if [ "$index" = "$link" ]
        then
            eval "$cmdLine index.html"
        fi

		truncLine=$(echo "$link" | sed "s@$prefix@@g")
		if [ ${#truncLine} -eq 0 ]; then
            if [ "$index" = "" ]
            then
                eval "$cmdLine index.html"
            fi
			continue
		fi

		if [[ $truncLine =~ ^https://.* ]]; then
			truncLine=$(echo "$truncLine" | sed -E 's@(http[s]?://)(.*)@\2@g')
		fi

		dirName=$(dirname $truncLine)
		fileName=$(basename $truncLine)
		if [ "$dirName" = "$fileName" ]; then # https://demo.com/some.txt
			dirName="."
		fi

		if [ ! -d "$dirName" ]; then
			mkdir -p "$dirName"
		fi

		# polyfill.min.js\?features\=default\&flags\=gated polyfill.min.js
		fileName=$(echo "$fileName" | sed -E 's@([^?]+)(\?.+)@\1@g')

		if [ ! -f "${dirName}/${fileName}" ]; then
			echo "Getting ${dirName}/${fileName} ..."
			eval "$cmdLine ${dirName}/${fileName}"
		else
			echo "file $truncLine alread exists, jump over"
		fi
	done

if [ "$junk" != "" ]; then
    sed -E -i "s@$junk@@g" index.html
fi
sed -E -i 's@$prefix@@g;s@(.+)(apis.google.com)(.*)@@g' index.html
sed -E -i "s@(.*)(\"|')(https\:\/\/)(.*)@\1\2\4@g;s@(.*)(\"|')(//)(.*)@\1\2\4@g" index.html

cd ..
cat >"$servFileName" <<EOF
package main

import (
	"log"
	"net/http"

	"github.com/gobuffalo/packr"
)

func main() {
	box := packr.NewBox("./$outFileDir")

	http.Handle("/", http.FileServer(box))
	host := ":3000"
	log.Printf("listen on %s\n", host)
	http.ListenAndServe(host, nil)
}
EOF

cat >"${servFileName%go}c" <<EOF
#include "httpd.h"

int main(int c, char **v)
{
	//debug_mode=1;
	serve_forever("3000");
	return 0;
}

void route(int sock_fd)
{
	serve_dir(sock_fd, "$outFileDir");
}
EOF

cat >Makefile<<EOF
.PHONY:all

all: ${servFileName%.go}

${servFileName%.go}: ${servFileName%go}c
	gcc -o \$@ \$^ ../httpd.c -I ../

clean:
	@rm -rf ${servFileName%.go}
EOF
